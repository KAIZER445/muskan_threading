// components/ContactLayOne.tsx
'use client';

import React, { useState, useEffect } from 'react';
import Image from 'next/image';

// Define the OpeningHour type
interface OpeningHour {
  day: string;
  time: string;
}

// Define the props interface for ContactLayOne
interface ContactLayOneProps {
  title: string;
  description: string;
  services: string[];
  addressLines: string[];
  openingHours: OpeningHour[];
}

const ContactLayOne: React.FC<ContactLayOneProps> = ({
  title,
  description,
  services,
  addressLines,
  openingHours,
}) => {
  const [currentPacificTime, setCurrentPacificTime] = useState(new Date());

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentPacificTime(new Date());
    }, 1000); // Update every second
    return () => clearInterval(interval); // Cleanup on unmount
  }, []);

  // Format Pacific Time using Intl.DateTimeFormat
  const pacificFormatter = new Intl.DateTimeFormat('en-US', {
    timeZone: 'America/Los_Angeles',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
    hour12: true,
  });
  const currentTimePacific = pacificFormatter.format(currentPacificTime);

  const dayFormatter = new Intl.DateTimeFormat('en-US', {
    timeZone: 'America/Los_Angeles',
    weekday: 'long',
  });
  const todayName = dayFormatter.format(currentPacificTime);

  // Highlight today's hours and determine if open
  const todayHours = openingHours.find((hour) => hour.day === todayName);
  const [currentHourPacific, currentMinutePacific] = currentPacificTime
    .toLocaleString('en-US', { timeZone: 'America/Los_Angeles', hour12: false, hour: '2-digit', minute: '2-digit' })
    .split(':')
    .map(Number);
  const currentTimeInHours = currentHourPacific + currentMinutePacific / 60;

  const isOpen = todayHours
    ? (() => {
        const [openTime, closeTime] = todayHours.time.split(' - ').map((t) => {
          const [hours, minutesPeriod] = t.split(':');
          const [minutes, period] = minutesPeriod.split(' ');
          let hourNum = parseInt(hours);
          if (period === 'PM' && hourNum !== 12) hourNum += 12;
          if (period === 'AM' && hourNum === 12) hourNum = 0;
          return hourNum + parseInt(minutes) / 60;
        });
        return currentTimeInHours >= openTime && currentTimeInHours <= closeTime;
      })()
    : false;

  // SVG icons for services
  const serviceIcons = [
    // Eyebrow Threading
<svg width="80px" height="80px" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg">
    <title>eyebrow_fill</title>
    <g id="页面-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="Part" transform="translate(-192.000000, -48.000000)" fill-rule="nonzero">
            <g id="eyebrow_fill" transform="translate(192.000000, 48.000000)">
                <path d="M24,0 L24,24 L0,24 L0,0 L24,0 Z M12.5934901,23.257841 L12.5819402,23.2595131 L12.5108777,23.2950439 L12.4918791,23.2987469 L12.4918791,23.2987469 L12.4767152,23.2950439 L12.4056548,23.2595131 C12.3958229,23.2563662 12.3870493,23.2590235 12.3821421,23.2649074 L12.3780323,23.275831 L12.360941,23.7031097 L12.3658947,23.7234994 L12.3769048,23.7357139 L12.4804777,23.8096931 L12.4953491,23.8136134 L12.4953491,23.8136134 L12.5071152,23.8096931 L12.6106902,23.7357139 L12.6232938,23.7196733 L12.6232938,23.7196733 L12.6266527,23.7031097 L12.609561,23.275831 C12.6075724,23.2657013 12.6010112,23.2592993 12.5934901,23.257841 L12.5934901,23.257841 Z M12.8583906,23.1452862 L12.8445485,23.1473072 L12.6598443,23.2396597 L12.6498822,23.2499052 L12.6498822,23.2499052 L12.6471943,23.2611114 L12.6650943,23.6906389 L12.6699349,23.7034178 L12.6699349,23.7034178 L12.678386,23.7104931 L12.8793402,23.8032389 C12.8914285,23.8068999 12.9022333,23.8029875 12.9078286,23.7952264 L12.9118235,23.7811639 L12.8776777,23.1665331 C12.8752882,23.1545897 12.8674102,23.1470016 12.8583906,23.1452862 L12.8583906,23.1452862 Z M12.1430473,23.1473072 C12.1332178,23.1423925 12.1221763,23.1452606 12.1156365,23.1525954 L12.1099173,23.1665331 L12.0757714,23.7811639 C12.0751323,23.7926639 12.0828099,23.8018602 12.0926481,23.8045676 L12.108256,23.8032389 L12.3092106,23.7104931 L12.3186497,23.7024347 L12.3186497,23.7024347 L12.3225043,23.6906389 L12.340401,23.2611114 L12.337245,23.2485176 L12.337245,23.2485176 L12.3277531,23.2396597 L12.1430473,23.1473072 Z" id="MingCute" fill-rule="nonzero">

</path>
                <path d="M18.9372,9.36167 C20.6395,10.1301 22.108,11.2831 22.8998,12.9158 C23.0681,13.2628 23.0219,13.6757 22.781,13.9769 C22.5401,14.278 22.1474,14.4138 21.772,14.3258 C15.8145,12.93 9.78907,15.3311 6.61118,16.6414 C4.618,17.4633 2.68113,16.7923 1.68066,15.44 C1.18289,14.7672 0.915929,13.9186 1.02369,13.0307 C1.36416,10.2254 4.88953,9.02468 7.21626,8.49728 C10.9972,7.64025 15.3643,7.74879 18.9372,9.36167 Z" id="路径" fill="#09244B">

</path>
            </g>
        </g>
    </g>
</svg>,
    // Facial Threading

<svg fill="#000000" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" 
	 width="80px" height="80px" viewBox="0 0 200.954 200.954">
<g>
	<g>
		<path d="M99,155.104c1.411,0,5.2-1.438,9.301-1.438c5.089,0,10.501,1.438,10.501,1.438s-8.923-7.584-12.088-7.584
			c-3.16,0-7.714,2.949-7.714,2.949s-3.621-2.764-6.226-2.949c-2.607-0.186-13.578,7.584-13.578,7.584s6.527-1.68,12.254-1.68
			C94.695,153.424,97.855,155.109,99,155.104z"/>
		<path d="M99,165.396c12.365,0,19.802-10.292,19.802-10.292s-4.403,2.659-10.86,3.012c-2.684,0.141-5.72-0.363-8.942-0.363
			c-2.658,0-5.364,0.711-7.673,0.607c-7.239-0.333-12.13-3.256-12.13-3.256S86.631,165.391,99,165.396z"/>
		<path d="M34.393,83.645c0.409-13.309,4.856-25.589,12.154-35.721c15.329-4.684,35.455-5.727,55.049-1.037
			c-11.244,2.433-21.74,7.888-30.519,16.159c-8.523,8.026-14.703,18.06-17.703,28.017l-0.038,0.096
			c1.583,0.887,3.456,1.882,5.507,2.834C66.801,79.817,81.792,70.241,99,70.241c8.526,0,16.492,2.39,23.347,6.478
			c-0.684,2.942-0.814,6.035-0.257,9.006l0.582,2.851l-0.462,0.936c-1.63,3.956-1.63,8.287-0.345,12.355
			c0.574-0.662,1.527-1.204,2.709-1.713c-0.744-2.927-0.701-6.205,0.615-9.414c2.624-6.4,17.442,0.717,17.442,0.717
			s-14.062-12.184-17.379-6.328c-1.904-10.151,5.241-21.891,16.208-19.475c-8.679,7.984,4.18,22.72,4.18,22.72
			s-4.781-16.068-1.233-20.042c5.257-5.907,17.3,3.16,17.379,11.872c-4.155-0.312-8.111,5.117-10.282,8.726l0.103-0.063
			c4.478-2.458,8.415-3.445,11.58-4.235c1.171-0.291,2.22-0.548,3.139-0.861c1.124-0.381,2.446-1.459,3.912-3.079
			C167.688,43.582,136.744,14.134,99,14.134c-36.608,0-66.838,27.669-70.973,63.191C30.513,80.792,32.661,82.944,34.393,83.645z
			 M163.568,83.582l0.034,0.375l-0.253-0.391L163.568,83.582z M126.539,68c-0.564,0.684-0.98,1.488-1.462,2.246
			c-7.639-4.011-16.534-5.995-26.078-5.995c-8.967,0-17.394,1.718-24.713,5.256c0.497-0.495,0.948-1.021,1.458-1.502
			c11.689-11.004,26.7-16.58,42.306-15.677c6.2,2.67,12.129,6.106,17.667,10.224C132.225,63.243,129.009,65.013,126.539,68z
			 M99,20.944c30.784,0,56.557,21.634,63.042,50.491c-3.147-4.685-8.324-8.215-13.32-8.215l-1.384,0.156
			C121.062,38.9,82.637,33.642,54.194,39.092C65.828,27.879,81.605,20.944,99,20.944z"/>
		<path d="M135.551,112.34h-0.011c-1.894,0-4.099-0.394-6.228-1.033c1.177,0.732,2.432,1.373,3.853,1.805l3.926,0.777
			c0.112,1.074,0.364,2.092,0.803,3.009c1.074,2.332,3.135,3.88,5.537,4.903c0.416-0.897,0.826-1.85,1.286-2.905
			c-1.789-0.761-3.213-1.872-3.896-3.354c-0.531-1.148-0.598-2.632-0.481-4.202C138.632,111.869,136.984,112.312,135.551,112.34z"/>
		<path d="M132.454,160.608c-0.783,0-1.85-0.208-2.909-0.975c-9.539,13.227-21.571,22.677-30.545,22.677
			c-8.764,0-20.464-9.007-29.9-21.757l-0.604,0.055c-1.871,0-3.625-1.007-5.403-2.834c1.699,2.951,3.083,5.669,3.939,8.098
			C78.115,178.775,91.356,186.82,99,186.82c8.876,0,25.269-10.846,37.093-27.547C134.905,160.127,133.701,160.608,132.454,160.608z"
			/>
		<path d="M47.537,131.608c2.405-1.326,4.977,3.638,7.823,8.765c4.55,8.213,10.993,20.815,14.873,16.58
			c3.769-4.104-8.752-20.115-14.376-32.066c-2.128-4.525-5.727-11.907-4.918-16.394c0.812-4.493,10.136,0.952,14.52,1.045
			c4.392,0.099,11.789-2.62,11.676-5.5c-0.063-1.564-7.98-3.041-15.408-5.799c-6.222-2.295-11.977-5.942-13.741-6.911
			c-5.893-3.245-10.954-3.768-14.265-4.903c-2.86-0.977-5.855-4.219-9.068-8.988L0,91.675c3.304,5.92,5.859,11.63,6.544,16.046
			c2.212,14.31,8.304,20.969,10.276,27.063c2.246,6.973,11.885,29.834,17.073,30.572c5.901,0.844-10.144-23.513-5.921-25.115
			c1.483-0.569,4.289,6.127,7.405,12.82c4.242,9.121,10.228,22.517,13.464,21.062c8.334-3.766-17.677-35.881-12.117-36.734
			c1.982-0.301,7.266,8.017,11.79,16.41c5.113,9.469,12.47,22.206,15.997,18.387c2.986-3.229-4.954-14.709-10.244-23.611
			C49.579,140.663,45.56,132.69,47.537,131.608z"/>
		<path d="M176.298,77.437c-3.209,4.76-6.206,8.005-9.063,8.988c-3.314,1.135-8.372,1.658-14.27,4.903
			c-1.764,0.974-7.521,4.616-13.736,6.911c-7.432,2.751-15.355,4.235-15.421,5.799c-0.104,2.88,7.289,5.599,11.69,5.5
			c4.376-0.093,13.7-5.538,14.512-1.045c0.813,4.486-2.792,11.874-4.916,16.394c-5.625,11.941-18.145,27.962-14.375,32.066
			c3.88,4.235,10.321-8.367,14.87-16.58c2.849-5.133,5.421-10.091,7.825-8.765c1.979,1.082-2.036,9.055-6.723,16.962
			c-5.296,8.908-13.229,20.388-10.241,23.612c3.522,3.812,10.884-8.921,15.993-18.382c4.524-8.394,9.8-16.716,11.794-16.416
			c5.552,0.854-20.456,32.964-12.126,36.729c3.237,1.455,9.226-11.93,13.465-21.056c3.124-6.688,5.926-13.385,7.411-12.826
			c4.217,1.607-11.816,25.958-5.929,25.121c5.188-0.738,14.829-23.602,17.073-30.572c1.976-6.095,8.065-12.761,10.276-27.063
			c0.691-4.417,3.241-10.127,6.546-16.05L176.298,77.437z"/>
		<path d="M114.847,114.359c-3.548,1.707-4.467,5.526-4.687,7.037c-0.216,1.51,3,0.562,3.104-0.4
			c0.071-0.673-0.181-1.713,1.472-3.267l0.056,0.969c1.266,2.194,4.076,2.95,6.261,1.681c2.194-1.265,2.942-4.051,1.695-6.238
			c3.403-0.536,7.042-0.607,7.042-0.607S119.605,112.05,114.847,114.359z"/>
		<path d="M128.454,119.503c0,0-3.223,1.488-6.058,2.08c-2.55,0.524-8.908,0.814-8.908,0.814s5.439,0.788,8.316,0.788
			C124.685,123.181,128.454,119.503,128.454,119.503z"/>
		<path d="M76.943,120.379c2.191,1.27,5.005,0.514,6.266-1.681l0.049-0.969c1.653,1.554,1.401,2.594,1.476,3.267
			c0.107,0.958,3.322,1.904,3.103,0.4c-0.217-1.511-1.136-5.33-4.684-7.037c-4.764-2.31-14.938-0.826-14.938-0.826
			s3.635,0.076,7.039,0.607C74.002,116.328,74.757,119.119,76.943,120.379z"/>
		<path d="M84.509,122.397c0,0-6.357-0.29-8.909-0.814c-2.837-0.592-6.058-2.08-6.058-2.08s3.77,3.678,6.651,3.678
			C79.072,123.181,84.509,122.397,84.509,122.397z"/>
	</g>
</g>
</svg>,
    // Waxing Services
<svg width="80" height="80" viewBox="0 0 300 150" xmlns="http://www.w3.org/2000/svg">

  <path d="M60 60 
           Q65 50 80 50 
           L220 50 
           Q235 50 240 60 
           L240 90 
           Q235 100 220 100 
           L80 100 
           Q65 100 60 90 
           Z"
        stroke="black" stroke-width="2" fill="none"/>


  <path d="M240 60 
           Q250 55 255 65 
           Q252 80 240 90"
        stroke="black" stroke-width="2" fill="none"/>
</svg>

,
  ];

  return (
    <div className="container mx-auto px-4 sm:px-6 md:px-8 lg:px-16 xl:px-20 py-8 sm:py-10 md:py-12 lg:py-15 font-poppins">
      <div className="flex flex-col md:flex-row gap-4 md:gap-6 lg:gap-8">
        {/* Left Section: Title, Description, Services */}
        <div className="w-full md:w-1/2 lg:w-2/3">
          <div className="pt-3">
            <h1 className="font-semibold text-xl sm:text-2xl md:text-3xl uppercase px-4 sm:px-6 md:px-8 lg:px-10 leading-relaxed tracking-wide">
              {title}
            </h1>
            <p className="px-4 sm:px-6 md:px-8 lg:px-10 pt-4 sm:pt-6 md:pt-8 lg:pt-10 text-justify text-sm sm:text-base md:text-lg leading-relaxed">
              {description}
            </p>
          </div>
          <div className="pt-6 sm:pt-8 md:pt-10 lg:pt-15 px-4 sm:px-6 md:px-8 lg:px-10 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4 md:gap-5 lg:gap-6">
            {services.map((service, index) => (
              <div
                key={index}
                className="border rounded-lg bg-purple-200 border-gray-400 border-2 sm:border-3 w-full"
              >
                <div className="flex items-center justify-center gap-2 sm:gap-3 md:gap-4 lg:gap-5 px-2 sm:px-3 md:px-4 py-2 sm:py-3 md:py-4">
                  {serviceIcons[index] || serviceIcons[1]}
                  <p className="uppercase font-bold text-xs sm:text-sm md:text-base">{service}</p>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Right Section: Address and Opening Hours */}
        <div className="w-full md:w-1/2 lg:w-1/3">
          <div className="mb-5 md:mb-0 px-2 sm:px-4">
            {/* Address Block */}
            <div className="bg-purple-400 text-white font-bold py-4 sm:py-5 md:py-6 lg:py-7 shadow-lg relative overflow-hidden">
              <div className="px-3 sm:px-4 md:px-6 lg:px-8">
                {addressLines.map((line, index) => (
                  <p key={index} className="py-1 sm:py-1.5 md:py-2 text-xs sm:text-sm md:text-base">{line}</p>
                ))}
              </div>
              <div className="absolute -right-5 -bottom-5">
                <svg
                  fill="#ffff"
                  version="1.1"
                  id="Capa_1"
                  xmlns="http://www.w3.org/2000/svg"
                  width="80px"
                  height="80px"
                  viewBox="0 0 31.603 31.603"
                  className="opacity-20 sm:w-[90px] sm:h-[90px] md:w-[100px] md:h-[100px] lg:w-[110px] lg:h-[110px]"
                >
                  <g>
                    <path d="M7.703,15.973c0,0,5.651-5.625,5.651-10.321C13.354,2.53,10.824,0,7.703,0S2.052,2.53,2.052,5.652
                      C2.052,10.614,7.703,15.973,7.703,15.973z M4.758,5.652c0-1.628,1.319-2.946,2.945-2.946s2.945,1.318,2.945,2.946
                      c0,1.626-1.319,2.944-2.945,2.944S4.758,7.278,4.758,5.652z"/>
                    <path d="M28.59,7.643l-0.459,0.146l-2.455,0.219l-0.692,1.106l-0.501-0.16l-1.953-1.76l-0.285-0.915l-0.377-0.977L20.639,4.2
                      l-1.446-0.283L19.159,4.58l1.418,1.384l0.694,0.817l-0.782,0.408l-0.636-0.188l-0.951-0.396l0.033-0.769l-1.25-0.514L17.27,7.126
                      l-1.258,0.286l0.125,1.007l1.638,0.316l0.284-1.609l1.353,0.201l0.629,0.368h1.011l0.69,1.384l1.833,1.859l-0.134,0.723
                      l-1.478-0.189l-2.553,1.289l-1.838,2.205l-0.239,0.976h-0.661l-1.229-0.566l-1.194,0.566l0.297,1.261l0.52-0.602l0.913-0.027
                      l-0.064,1.132l0.757,0.22l0.756,0.85l1.234-0.347l1.41,0.222l1.636,0.441l0.819,0.095l1.384,1.573l2.675,1.574l-1.729,3.306
                      l-1.826,0.849l-0.693,1.889l-2.643,1.765l-0.282,1.019c6.753-1.627,11.779-7.693,11.779-14.95
                      C31.194,13.038,30.234,10.09,28.59,7.643z"/>
                    <path d="M17.573,24.253l-1.12-2.078l1.028-2.146l-1.028-0.311l-1.156-1.159l-2.56-0.573l-0.85-1.779v1.057h-0.375l-1.625-2.203
                      c-0.793,0.949-1.395,1.555-1.47,1.629L7.72,17.384l-0.713-0.677c-0.183-0.176-3.458-3.315-5.077-7.13
                      c-0.966,2.009-1.52,4.252-1.52,6.63c0,8.502,6.891,15.396,15.393,15.396c0.654,0,1.296-0.057,1.931-0.135l-0.161-1.864
                      c0,0,0.707-2.77,0.707-2.863C18.28,26.646,17.573,24.253,17.573,24.253z"/>
                    <path d="M14.586,3.768l1.133,0.187l2.75-0.258l0.756-0.834l1.068-0.714l1.512,0.228l0.551-0.083
                      c-1.991-0.937-4.207-1.479-6.553-1.479c-1.096,0-2.16,0.128-3.191,0.345c0.801,0.875,1.377,1.958,1.622,3.163L14.586,3.768z
                      M16.453,2.343l1.573-0.865l1.009,0.582l-1.462,1.113l-1.394,0.141L15.55,2.907L16.453,2.343z"/>
                  </g>
                </svg>
              </div>
            </div>

            {/* Opening Hours Block */}
            <div className="opening w-full shadow-lg pb-6 sm:pb-8 md:pb-10 lg:pb-15">
              <div className="flex justify-between px-3 sm:px-4 md:px-6 lg:px-8 w-full py-4 pt-6 sm:pt-8 md:pt-10 lg:pt-15">
                <p className="uppercase font-semibold text-base sm:text-lg md:text-xl">
                  Opening <br /> Hours
                </p>
                <svg
                  fill="#c17aff"
                  width="40px"
                  height="40px"
                  viewBox="0 0 32 32"
                  version="1.1"
                  xmlns="http://www.w3.org/2000/svg"
                  className="w-8 h-8 sm:w-9 sm:h-9 md:w-10 md:h-10"
                >
                  <title>clock</title>
                  <path d="M0 7.008q0 1.856 0.992 3.52 1.184-3.328 3.712-5.824t5.824-3.712q-1.696-0.992-3.52-0.992-2.912 0-4.96 2.080t-2.048 4.928zM2.016 16q0 2.784 1.056 5.312t2.944 4.48v4.224q0 0.832 0.576 1.408t1.408 0.576 1.408-0.576 0.608-1.408v-1.408q2.912 1.408 5.984 1.408t6.016-1.408v1.408q0 0.832 0.576 1.408t1.408 0.576 1.408-0.576 0.608-1.408v-4.224q1.888-1.952 2.944-4.448t1.056-5.344-1.12-5.44-2.976-4.48-4.48-2.976-5.44-1.12-5.44 1.12-4.48 2.976-2.976 4.48-1.088 5.44zM6.016 16q0-2.048 0.768-3.872t2.144-3.2 3.2-2.144 3.872-0.8q2.72 0 5.024 1.344t3.648 3.648 1.344 5.024q0 2.016-0.8 3.872t-2.144 3.2-3.2 2.144-3.872 0.768q-2.72 0-5.024-1.312t-3.616-3.648-1.344-5.024zM14.016 16q0 0.832 0.576 1.408t1.408 0.576h4q0.832 0 1.408-0.576t0.608-1.408-0.608-1.408-1.408-0.608h-1.984v-1.984q0-0.832-0.608-1.408t-1.408-0.608-1.408 0.608-0.576 1.408v4zM21.472 0.992q3.328 1.216 5.824 3.712t3.712 5.824q0.992-1.664 0.992-3.52 0-2.88-2.048-4.928t-4.96-2.080q-1.824 0-3.52 0.992z"></path>
                </svg>
              </div>
              <div className="px-3 sm:px-4 md:px-6 lg:px-8">
                <div className="text-sm sm:text-base md:text-lg font-bold text-purple-400 mb-2">
                  Current Time: {currentTimePacific} (PT)
                </div>
                {openingHours.map((hour, index) => (
                  <div
                    key={index}
                    className={`py-1 sm:py-2 md:py-3 ${hour.day === todayName ? 'bg-[#E5E5E5] font-bold rounded-lg p-2' : ''}`}
                  >
                    <p className="uppercase text-purple-400 text-xs sm:text-sm md:text-base font-bold">
                      {hour.day}
                      {hour.day === todayName && (
                        <span className="ml-2 text-gray-400 font-bold text-xs sm:text-sm">
                          {isOpen ? '(Open Now)' : '(Closed)'}
                        </span>
                      )}
                    </p>
                    <p className="text-black font-bold text-sm sm:text-base md:text-lg">{hour.time}</p>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ContactLayOne;